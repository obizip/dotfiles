vim9script

set mouse=a
syntax on
filetype indent plugin on
set termguicolors
set background=dark

colorscheme quiet
hi Constant   guifg=lightcyan
hi Type       guifg=lightyellow
hi Statement  guifg=darkgrey
hi Comment    guifg=darkseagreen
hi SignColumn guibg=gray15

set encoding=utf-8
set wildmode=list:longest,list:full

set nobackup
set noswapfile
set confirm
set autoread
set hidden

set wrapscan
set incsearch
set hlsearch
set ignorecase
set smartcase

set autoindent
set smartindent
set smarttab
set expandtab

set tabstop=4
set shiftwidth=0
set softtabstop=-1

if has('persistent_undo')
  var undodir_path = expand("~/.local/share/vim/undo")
  if !isdirectory(undodir_path)
    call mkdir(undodir_path, "p")
  endif
  execute 'set undodir=' .. undodir_path
  set undofile
endif

set clipboard+=unnamed
set backspace=indent,eol,start

g:mapleader = "\<Space>"

inoremap <C-f> <right>
inoremap <C-b> <left>
inoremap <C-a> <C-o>^
inoremap <C-e> <end>
nnoremap <C-p> :bp<cr>
nnoremap <C-n> :bn<cr>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap Y     y$

def ToUpperPrevWord(): string
  var col = getpos('.')[2]
  var substring = getline('.')[0 : col - 1]
  var word = matchstr(substring, '\v<(\k(<)@!)*$')
  return toupper(word)
enddef

inoremap <expr> <C-l> "<C-w>" .. <SID>ToUpperPrevWord()

var data_dir = has('nvim') ? stdpath('data') .. '/site' : '~/.vim'
if empty(glob(data_dir .. '/autoload/plug.vim'))
  silent execute '!curl -fLo '..data_dir..'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

augroup custom_indent
	autocmd!

	autocmd Filetype c setlocal tabstop=2
	autocmd Filetype cpp setlocal tabstop=2
augroup END

call plug#begin()

Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'lambdalisue/vim-fern'
Plug 'lambdalisue/vim-fern-hijack'
Plug 'yegappan/lsp'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

call plug#end()

nnoremap <leader>f <CMD>Files<cr>
nnoremap <leader>p <CMD>GFiles<cr>
nnoremap <leader>b <CMD>Buffers<cr>
nnoremap <leader>c <CMD>Files ~/.config<cr>
nnoremap <leader>t <CMD>Fern . -drawer -toggle<CR>
nnoremap <leader>/ <CMD>Rg<CR>

# Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
# Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

g:gitgutter_sign_priority = 1

# fern.vim
g:fern#default_hidden = 1
def InitFern()
  nmap <buffer> N <Plug>(fern-action-new-path)
  nmap <buffer> <CR> <Plug>(fern-action-open-or-expand)
enddef

augroup my-fern
  autocmd! *
  autocmd FileType fern call InitFern()
augroup END


def SetupLsp()
    var lspOpts = {autoHighlightDiags: true}
    call g:LspOptionsSet(lspOpts)

    var lspServers = [
         {
              name:     'clangd',
              filetype: ['c', 'cpp'],
              path:     'clangd',
              args:     ['--background-index', '--enable-config']
         },
         {
            name:     'gopls',
            filetype: ['go', 'gomod'],
            path:     'gopls',
            args:     ['serve'],
            syncInit: true
         },
         {
             name: 'rust-analyzer',
             filetype: ['rust'],
             path: 'rust-analyzer',
             args: [],
             syncInit: true,
         },
         {
             name: 'phpactor',
             filetype: ['php'],
             path: 'phpactor',
             args: ['language-server'],
             syncInit: true,
         },
         {
             name: 'pyright',
             filetype: ['python'],
             path: 'pyright-langserver',
             args: ['--stdio'],
             syncInit: true,
         },
    ]

    for server in lspServers
        if executable(server.name)
            call g:LspAddServer([server])
        endif
    endfor
enddef
autocmd User LspSetup call SetupLsp()
 
def LspKeymap()
   nnoremap <buffer> ge        <CMD>LspDiag current<CR>
   nnoremap <buffer> K         <CMD>LspHover<CR>
   nnoremap <buffer> gd        <CMD>LspGotoDefinition<CR>
   nnoremap <buffer> <leader>r <CMD>LspRename<CR>
   nnoremap <buffer> gr        <CMD>LspReferences<CR>
   nnoremap <buffer> [g        <CMD>LspDiag prev<CR>
   nnoremap <buffer> ]g        <CMD>LspDiag next<CR>
   nnoremap <buffer> gs        <CMD>LspSymbolSearch<CR>
   nnoremap <buffer> gi        <CMD>LspGotoImpl<CR>
   nnoremap <buffer> gt        <CMD>LspGotoTypeDef<CR>
   nnoremap <buffer> gt        <CMD>LspGotoTypeDef<CR>
enddef
autocmd User LspAttached call LspKeymap()
