set mouse=a
syntax on
filetype indent plugin on
set termguicolors
set background=dark

set encoding=utf-8
" set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8

set number
" set signcolumn=auto
set numberwidth=1
set cursorline

set nobackup
set noswapfile
set confirm
set autoread
set hidden
set showmatch

set wrapscan
set incsearch
set hlsearch
set ignorecase
set smartcase

set autoindent
set smartindent
set smarttab

set tabstop=4
set shiftwidth=0
set softtabstop=-1

if has('persistent_undo')
  let s:undodir_path = expand("~/.local/share/vim/undo")
  if !isdirectory(s:undodir_path)
    call mkdir(s:undodir_path, "p")
  endif
  let &undodir=s:undodir_path
  set undofile
endif

set clipboard+=unnamed
set backspace=indent,eol,start

" set rtp+=/opt/homebrew/opt/fzf

let mapleader = "\<Space>"

inoremap <C-f> <right>
inoremap <C-b> <left>
inoremap <C-a> <C-o>^
inoremap <C-e> <end>
" nnoremap <ESC><ESC> :noh<cr>
nnoremap <C-h> :bp<cr>
nnoremap <C-l> :bn<cr>

function s:toupper_prev_word()
  let col = getpos('.')[2]
  let substring = getline('.')[0:col-1]
  let word = matchstr(substring, '\v<(\k(<)@!)*$')
  return toupper(word)
endfunction

inoremap <expr> <C-l> "<C-w>" .. <SID>toupper_prev_word()

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

Plug 'obizip/bquiet.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'lambdalisue/vim-fern'
Plug 'lambdalisue/vim-fern-hijack'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

call plug#end()

colorscheme bquiet

nnoremap <leader>f :Files<cr>
nnoremap <leader>p :GFiles<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>c :Files ~/.config<cr>
nnoremap <leader>t :Fern . -drawer -toggle<CR>

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    " setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>r <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    " nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    " nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/.vim/vim-lsp.log')

let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_diagnostics_virtual_text_enabled = 0
" let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_highlights_enabled = 0

" fern.vim
let g:fern#default_hidden = 1
function! s:init_fern() abort
  nmap <buffer> N <Plug>(fern-action-new-path)
  nmap <buffer> <CR> <Plug>(fern-action-open-or-expand)
endfunction

augroup my-fern
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
