vim9script

set mouse=a
syntax on
filetype indent plugin on
set termguicolors
set background=dark

colorscheme quiet
hi Constant   guifg=lightcyan
# hi Type       guifg=lightyellow
hi Statement  guifg=darkgrey
hi Define     guifg=darkgrey
hi Comment    guifg=green4
hi SignColumn guibg=gray15

set encoding=utf-8
set wildmode=list:longest,list:full

set nobackup
set noswapfile
set confirm
set autoread
set hidden

set nowrapscan
set incsearch
set hlsearch
set ignorecase
set smartcase

set autoindent
set smartindent
set smarttab
set expandtab

set tabstop=4
set shiftwidth=0
set softtabstop=-1

if has('persistent_undo')
    var undodir_path = expand("~/.local/share/vim/undo")
    if !isdirectory(undodir_path)
        call mkdir(undodir_path, "p")
    endif
    execute 'set undodir=' .. undodir_path
    set undofile
endif

set clipboard+=unnamed
set backspace=indent,eol,start

set laststatus=2
def g:MyStatusLine(): string
    var prefix = "%<%f\ %h%w%m%r"
    var suffix = "%-14.(%l,%c%V%)\ %P"

    var isrunning = lsp#lsp#ServerReady()
    var counts = lsp#lsp#ErrorCount()
    if !isrunning && (counts.Error > 0) || (counts.Warn > 0)
        var counts_str = " E:" .. counts.Error .. " W:" .. counts.Warn
        return prefix .. counts_str .. "%=" .. suffix
    else
        return prefix .. "%=" .. suffix
    endif
enddef
set statusline=%!g:MyStatusLine()

g:mapleader = "\<Space>"

inoremap <C-f> <right>
inoremap <C-b> <left>
inoremap <C-a> <C-o>^
inoremap <C-e> <end>
nnoremap <C-p> :bp<cr>
nnoremap <C-n> :bn<cr>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap Y     y$

def ToUpperPrevWord(): string
    var col = getpos('.')[2]
    var substring = getline('.')[0 : col - 1]
    var word = matchstr(substring, '\v<(\k(<)@!)*$')
    return toupper(word)
enddef

inoremap <expr> <C-l> "<C-w>" .. <SID>ToUpperPrevWord()

var data_dir = has('nvim') ? stdpath('data') .. '/site' : '~/.vim'
if empty(glob(data_dir .. '/autoload/plug.vim'))
    silent execute '!curl -fLo ' .. data_dir .. '/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

augroup custom_indent
    autocmd!

    autocmd Filetype c setlocal tabstop=2
    autocmd Filetype cpp setlocal tabstop=2
augroup END

call plug#begin()

Plug 'junegunn/vim-easy-align'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'lambdalisue/vim-fern'
Plug 'lambdalisue/vim-fern-hijack'
Plug 'yegappan/lsp'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'vim-python/python-syntax'

Plug 'vim-crystal/vim-crystal'

call plug#end()

nnoremap <leader>f <CMD>Files<cr>
nnoremap <leader>p <CMD>GFiles<cr>
nnoremap <leader>b <CMD>Buffers<cr>
nnoremap <leader>c <CMD>Files ~/.config<cr>
nnoremap <leader>t <CMD>Fern . -drawer -toggle<CR>
nnoremap <leader>/ <CMD>Rg<CR>

# Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
# Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

g:gitgutter_sign_priority = 1
hi GitGutterAdd guifg=green guibg=gray15
hi GitGutterChange guifg=lightblue guibg=gray15
hi GitGutterDelete guifg=red guibg=gray15

# fern.vim
g:fern#default_hidden = 1
def InitFern()
    nmap <buffer> N <Plug>(fern-action-new-path)
    nmap <buffer> <CR> <Plug>(fern-action-open-or-expand)
enddef

augroup my-fern
    autocmd! *
    autocmd FileType fern call InitFern()
augroup END

def SetupLsp()
    hi link LspDiagInlineError Normal
    hi LspDiagInlineError guifg=NONE guibg=NONE cterm=underline
    hi link LspDiagInlineHint Normal
    hi LspDiagInlineHint guifg=NONE guibg=NONE cterm=underline
    hi link LspDiagInlineInfo Normal
    hi LspDiagInlineInfo guifg=NONE guibg=NONE cterm=underline
    hi link LspDiagInlineWarning Normal
    hi LspDiagInlineWarning guifg=NONE guibg=NONE cterm=underline

    hi LspDiagSignErrorText   guifg=red
    hi LspDiagSignHintText    guifg=green
    hi LspDiagSignInfoText    guifg=blue
    hi LspDiagSignWarningText guifg=orange

    var lspOpts = {
        autoComplete: false,
        completionMatcher: "fuzzy",
        autoHighlightDiags: true,
        highlightDiagInline: true,
        hoverInPreview: true,
    }
    call g:LspOptionsSet(lspOpts)

    var lspServers = [
        {
            name:     'clangd',
            filetype: ['c', 'cpp'],
            path:     'clangd',
            args:     ['--background-index', '--enable-config']
        },
        {
            name:     'gopls',
            filetype: ['go', 'gomod'],
            path:     'gopls',
            args:     ['serve'],
            syncInit: true
        },
        {
            name: 'rust-analyzer',
            filetype: ['rust'],
            path: 'rust-analyzer',
            args: [],
            syncInit: true,
        },
        {
            name: 'phpactor',
            filetype: ['php'],
            path: 'phpactor',
            args: ['language-server'],
            syncInit: true,
        },
        {
            name: 'pyright',
            filetype: ['python'],
            path: 'pyright-langserver',
            args: ['--stdio'],
            syncInit: true,
        },
        {
            name: 'crystalline',
            filetype: ['crystal'],
            path: 'crystalline',
            args: ['--stdio'],
            syncInit: true,
        },
    ]

    for server in lspServers
        if executable(server.name)
            call g:LspAddServer([server])
        endif
    endfor
enddef
autocmd User LspSetup call SetupLsp()

def g:OpenDiagLocList()
    var counts = lsp#lsp#ErrorCount()

    var total = 0
    for [_, cnt] in items(counts)
        total += cnt
    endfor

    if total > 0
        execute "LspDiag show"
    else
        execute "lclose"
    endif
enddef

def LspKeymap()
    nnoremap <buffer> ge        <CMD>LspDiag current<CR>
    nnoremap <buffer> K         <CMD>LspHover<CR>
    nnoremap <buffer> gd        <CMD>LspGotoDefinition<CR>
    nnoremap <buffer> <leader>r <CMD>LspRename<CR>
    nnoremap <buffer> <leader>x <CMD>call g:OpenDiagLocList()<CR>
    nnoremap <buffer> gr        <CMD>LspReferences<CR>
    nnoremap <buffer> [g        <CMD>LspDiag prev<CR>
    nnoremap <buffer> ]g        <CMD>LspDiag next<CR>
    nnoremap <buffer> gs        <CMD>LspSymbolSearch<CR>
    nnoremap <buffer> gi        <CMD>LspGotoImpl<CR>
    nnoremap <buffer> gt        <CMD>LspGotoTypeDef<CR>
    nnoremap <buffer> gt        <CMD>LspGotoTypeDef<CR>
enddef
autocmd User LspAttached call LspKeymap()

# python-syntax 
g:python_highlight_all = 1
hi link pythonImport Statement
